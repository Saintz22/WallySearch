#pragma once

class Matrix {
public:

	Matrix(); //constructor...
	~Matrix(); //deconstructor...
	Matrix(int iHeight, int iWidth, double* input_data); //loads into the matrix an image...
	static void WritePGM(char * filename, double* data, int sizeR, int sizeC, int Q); //method for writing images...
	static double* readTXT(char * fileName, int sizeR, int sizeC); //method for reading arrays...
	static double SSDCalc(double* WallySma, double* WallySplit);  //method for sum of squared differences...
	double* getData() { return data; }; //returns the loaded in file, declared here as the method isnt too long...
	//-----------------------------------------------------------------------------------------------------------//
	//--------------------------- No Longer Required Methods ----------------------------------------------------//
	double** ConvertTo2DArray(double* inputFile, int iX, int iY); //was used in initial design to compute via a 2d array, not efficient enough so an alternative method was done instead...
	double* ConvertTo1DArray(double** inputFile, int iX, int iY); //used to convert the 2d array back to a 1d array, no longer in use...

private:
	double* data;
	int height;
	int width;

};